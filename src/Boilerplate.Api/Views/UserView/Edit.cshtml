@model Boilerplate.Application.DTOs.User.GetUserExtendedDto

@using Newtonsoft;
@using Newtonsoft.Json

<div class="top-bar d-flex justify-content-between align-items-center pt-4 px-2">
    <div class="text-start ps-4">
        <p>Users</p>
        <div>
            <a href="/">Home</a> <span> &rarr; </span>
            <a href="/user">Users</a> <span> &rarr; </span>
            <a href="#">Edit User</a>
        </div>
    </div>
</div>
<div class="px-3 my-5 container">
       <div id="form"></div>
  
</div>

<script>

    $(() => {
         function isNotEmpty(value) {
       return value !== undefined && value !== null && value !== '';
     }
    const storeSubsites = new DevExpress.data.CustomStore({
    key: 'id',
    load(loadOptions) {
      const deferred = $.Deferred();
      const args = {};
      [
        'skip',
        'take',
        'requireTotalCount',
        'requireGroupCount',
        'sort',
        'filter',
        'totalSummary',
        'group',
        'groupSummary',
      ].forEach((i) => {
        if (i in loadOptions && isNotEmpty(loadOptions[i])) {
          args[i] = JSON.stringify(loadOptions[i]);
        }
      });
      $.ajax({
        url: '/subsite/Get/',
        dataType: 'json',
        data: args,
        success(result) {
            debugger;
          deferred.resolve(result.result, {
            totalCount: result.totalItems
          });
        },
        error() {
          deferred.reject('Data Loading Error');
        },
        timeout: 5000,
      });

      return deferred.promise();
    }       
  });
      const storeDisciplines = new DevExpress.data.CustomStore({
    key: 'id',
    load(loadOptions) {
      const deferred = $.Deferred();
      const args = {};
      [
        'skip',
        'take',
        'requireTotalCount',
        'requireGroupCount',
        'sort',
        'filter',
        'totalSummary',
        'group',
        'groupSummary',
      ].forEach((i) => {
        if (i in loadOptions && isNotEmpty(loadOptions[i])) {
          args[i] = JSON.stringify(loadOptions[i]);
        }
      });
      $.ajax({
        url: '/discipline/Get/',
        dataType: 'json',
        data: args,
        success(result) {
            debugger;
          deferred.resolve(result.result, {
            totalCount: result.totalItems
          });
        },
        error() {
          deferred.reject('Data Loading Error');
        },
        timeout: 5000,
      });

      return deferred.promise();
    }       
  });
const formData = {
  Email: '@Model.Email',
  Role:'@Model.Role',
  Password: '',
  DisplayName: '@Model.NameEn',
  MobilePhone: '@Model.MobilePhone',
  Id: '@Model.Id',
};


  const formWidget = $('#form').dxForm({
    formData,
    readOnly: false,
      colCount: 2,
    showColonAfterLabel: true,
    showValidationSummary: true,
    validationGroup: 'customerData',
    items: [
         {
      itemType: 'group',
      items: [
          {
        dataField: 'DisplayName',
        validationRules: [{
          type: 'required',
          message: 'Name is required',
        }, {
          type: 'pattern',
          pattern: '^[^0-9]+$',
          message: 'Do not use digits in the Name',
        }],

      },
     {
        dataField: 'Password',
        editorOptions: {
          mode: 'password',
        },
      },{
        dataField: 'MobilePhone',
     //    helpText: 'Mobile Number Format 05X XXX XXX',
     //    editorOptions: {
     //      mask: '000 000 0000',
     //      maskRules: {
     // //       X: /[02-9]/,
     //      },
     //      maskInvalidMessage: 'Mobile Number Format 05X XXX XXX',
     //    },
     //    validationRules: [{
     //      type: 'pattern',
     //      pattern: /\d{10}$/,
     //      message: 'Mobile Number Format 05X XXX XXX',
     //    }],
      },
      
    {
        dataField: 'subSites',
        label: {
          text: 'Subsites',
        },
        editorType: 'dxList',
        editorOptions: {
        showSelectionControls: true,
        selectionMode: 'all',
         height: 400,
        dataSource: new DevExpress.data.DataSource({
        store: storeSubsites,
      }),
        displayExpr: 'nameEn',
        valueExpr: 'id',
        onSelectionChanged() {
         debugger;
         formData.SubSites = formWidget.getEditor('subSites').option('selectedItemKeys');
        }
          },
            
      }]},
        {
      itemType: 'group',
      items: [
          {
        dataField: 'Email',
        disabled:true,
        validationRules: [{
          type: 'required',
          message: 'Email is required',
        }, {
          type: 'email',
          message: 'Email is invalid',
        }],
      },
      {
      dataField: 'Role',
      editorType: 'dxSelectBox',
      editorOptions: {
        items: @Html.Raw(JsonConvert.SerializeObject(ViewBag.Roles as ICollection<string>,Formatting.None)),
        searchEnabled: true,
      },
      validationRules: [{
        type: 'required',
        message: 'Role is required',
      }],
    }
    ,

        {
        dataField: 'disciplines',
        label: {
          text: 'Disciplines',
        },
        editorType: 'dxList',
        editorOptions: {
        showSelectionControls: true,
        selectionMode: 'all',
         height: 400,
        dataSource: new DevExpress.data.DataSource({
        store: storeDisciplines,
      }),
        displayExpr: 'nameEn',
        valueExpr: 'id',
        onSelectionChanged() {
         debugger;
         formData.Disciplines = formWidget.getEditor('disciplines').option('selectedItemKeys');
        }
          },
            
      }


],
    }, 
    

    {
      itemType: 'button',
      horizontalAlignment: 'left',
        buttonOptions: {
            text: 'submit',
            type: 'success',
            onClick: function (e) {
            var dxFormInstance = $("#form").dxForm("instance");
            var validationResult = dxFormInstance.validate();

            if (validationResult.isValid){
                 $.ajax({
            url: "/user/edit/@Model.Id",
            type: "POST",
            data: dxFormInstance.option("formData"),
            success: function (data) {
             DevExpress.ui.notify({
                message: 'User Edited Successfully',
                position: {
                my: 'center top',
                at: 'center top',
                },
             }, 'success',2000);

            setTimeout(function () {
                    window.location = "/user/index";
            }, 2000);

            },
            error: function (xhr, textStatus, errorThrown) {
                alert('Request Status: ' + xhr.status + '; Status Text: ' + textStatus + '; Error: ' + errorThrown);
            }
            });

            }
          }},
    }],
  }).dxForm('instance');
});

</script>